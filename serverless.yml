service: athvio-nutrition
frameworkVersion: "3"

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage}
  deploymentBucket:
    blockPublicAccess: true
  stackTags:
    domain-name: sonqo
    system-name: athvio-nutrition
    vertical-name: merchants-development
    owner: ${file(catalog-info.yaml):spec.owner}
    shared-resource: false
    environment: ${self:custom.environments.${opt:stage}}
    provider: aws
  environment:
    SERVICE_ENVIRONMENT: ${self:custom.environments.${opt:stage,'develop'}}
    DEFAULT_CONSUMER_ID: ${file(catalog-info.yaml):metadata.name}

resources:
  Parameters:
    ClusterArn:
      Type: String
      Description: Existent cluster for add new services
      Default: arn:aws:ecs:${aws:region}:${aws:accountId}:cluster/${self:custom.clusterName}
    SecurityGroup:
      Type: String
      Description: Security group used for ${self:service}
      Default: ${self:custom.securityGroup.${opt:stage}.${aws:region}}
    VPCId:
      Type: AWS::EC2::VPC::Id
      Default: ${self:custom.VPCId.${aws:region}.${opt:stage}}
    Subnet1:
      Type: AWS::EC2::Subnet::Id
      Description: Application subnet 1
      Default: ${self:custom.Subnet.${opt:stage}.${aws:region}.subnet1}
    Subnet2:
      Type: AWS::EC2::Subnet::Id
      Description: Application subnet 2
      Default: ${self:custom.Subnet.${opt:stage}.${aws:region}.subnet2}
    ComponentName:
      Type: String
      Default: athvio-nutrition-backend/monolith
    RepositoryNameAthNut:
      Type: String
      Default: athvio-nutrition-backend
    ExecutionRoleNxName:
      Type: String
      Default: fargate-role-athvio-nutrition
    TargetGroupAthNutName2:
      Type: String
      Default: athvio-nutrition-tgr
    ServiceFamilyNameNx:
      Type: String
      Default: athvio-nutrition-manager
    ServiceNameNx:
      Type: String
      Default: athvio-nutrition-service
    LinkManagerAthNutName:
      Type: String
      Default: athvio-nutrition
    ContainerName:
      Type: String
      Default: application
    LoadBalancerPort2:
      Type: Number
      Description: Container port of app requiring LoadBalancer exposure
      Default: 57343
    AppContainerPort2:
      Type: Number
      Description: Container port of app requiring LoadBalancer exposure
      Default: 57343
    AppHostPort2:
      Type: Number
      Description: Host port of app requiring LoadBalancer exposure
      Default: 57343
    ClientPort:
      Type: Number
      Description: Client port
      Default: 8015
  Conditions:
    IsNorthVirg:
      Fn::Equals:
        - ${aws:region}
        - us-east-1

  Resources:
    ExecutionTaskRoleAthNut:
      Type: AWS::IAM::Role
      Condition: IsNorthVirg
      Properties:
        RoleName: !Ref ExecutionRoleNxName
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ecs-tasks.amazonaws.com
                  - ecs.amazonaws.com
              Action: "sts:AssumeRole"

    TargetGroupAthNut2:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Ref TargetGroupAthNutName2
        Port: !Ref AppContainerPort2
        HealthCheckPath: /ping
        HealthCheckPort: "57343"
        HealthCheckProtocol: HTTP
        Protocol: TCP
        TargetType: ip
        VpcId: !Ref VPCId

    TargetGroupAthNutForSocket:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join ["", [!Ref TargetGroupAthNutName2, "-socket"]]
        Port: !Ref ClientPort
        HealthCheckPort: "57343"
        HealthCheckPath: /ping
        HealthCheckProtocol: HTTP
        Protocol: TCP
        TargetType: ip
        VpcId: !Ref VPCId

    ListenerAthNutHTTP2:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref TargetGroupAthNut2
            Type: forward
        LoadBalancerArn: !Ref LoadBalancerAthNut
        Port: !Ref LoadBalancerPort2
        Protocol: TCP

    ListenerAthNutSocket:
      DependsOn:
        - TargetGroupAthNutForSocket
        - LoadBalancerAthNut
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref TargetGroupAthNutForSocket
            Type: forward
        LoadBalancerArn: !Ref LoadBalancerAthNut
        Port: !Ref ClientPort
        Protocol: TCP

    LoadBalancerAthNut:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Type: network
        LoadBalancerAttributes:
          - Key: access_logs.s3.enabled
            Value: "true"
          - Key: access_logs.s3.bucket
            Value: !Ref LoadBalancerAccessLogsBucket
        Name: !Join ["", [!Ref ComponentName, "-lb"]]
        Scheme: internal
        Subnets:
          - !Ref Subnet1
          - !Ref Subnet2

    LoadBalancerAccessLogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Join ["", ["${self:service}", "-elb-al-${sls:stage}-${aws:region}"]]
        BucketEncryption: !Ref "AWS::NoValue"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LoggingConfiguration:
          DestinationBucketName: !Join ["", ["${self:service}", "-elb-al-${sls:stage}-${aws:region}"]]
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldLogs
              Status: Enabled
              ExpirationInDays: 30

    LoadBalancerAccessLogsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref LoadBalancerAccessLogsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowELBWriteAccess
              Effect: Allow
              Principal:
                Service: "delivery.logs.amazonaws.com"
              Action: "s3:PutObject"
              Resource: !Join ["", ["arn:aws:s3:::", !Ref LoadBalancerAccessLogsBucket, "/*"]]
              Condition:
                StringEquals:
                  "s3:x-amz-acl": "bucket-owner-full-control"
            - Sid: AWSLogDeliveryAclCheck
              Effect: Allow
              Principal:
                Service: delivery.logs.amazonaws.com
              Action: s3:GetBucketAcl
              Resource: !GetAtt LoadBalancerAccessLogsBucket.Arn

    TaskDefinitionAthNut:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: !Ref ServiceFamilyNameNx
        NetworkMode: awsvpc
        ExecutionRoleArn:
          !Join ["", ["arn:aws:iam::${aws:accountId}:role/", !Ref ExecutionRoleNxName]]
        TaskRoleArn: !Join ["", ["arn:aws:iam::${aws:accountId}:role/", !Ref ExecutionRoleNxName]]
        Cpu: "256"
        Memory: "0.5GB"
        RequiresCompatibilities:
          - FARGATE
        ContainerDefinitions:
          - Name: !Ref ContainerName
            Image:
              !Join [
                "",
                [
                  "${aws:accountId}",
                  ".dkr.ecr.",
                  "${aws:region}",
                  ".amazonaws.com/",
                  !Ref RepositoryNameAthNut,
                  ":xxxxxxxx-",
                  "${self:custom.image.${opt:stage}}",
                ],
              ]
            Environment:
              - Name: NODE_ENV
                Value: ${opt:stage}
              - Name: PORT
                Value: "57343"
            PortMappings:
              - ContainerPort: !Ref AppContainerPort2
                HostPort: !Ref AppHostPort2
              - ContainerPort: !Ref ClientPort
                HostPort: !Ref ClientPort
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-region: ${aws:region}
                awslogs-group: !Join ["", ["/ecs/logs-", !Ref ComponentName, "-${aws:region}"]]
                awslogs-create-group: "true"
                awslogs-stream-prefix: !Join ["", ["ecs-", !Ref ComponentName]]

    LogGroupAthNut:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Join ["", ["/ecs/logs-", !Ref ComponentName, "-${aws:region}"]]
        RetentionInDays: 60

    SubscriptionFilter:
      Type: AWS::Logs::SubscriptionFilter
      Properties:
        RoleArn: arn:aws:iam::${aws:accountId}:role/${opt:stage}-kinesis-firehose-datadog-CloudWatchLogsRole-${self:custom.${aws:region}}
        LogGroupName: !Ref LogGroupAthNut
        FilterPattern: ""
        DestinationArn: arn:aws:firehose:${aws:region}:${aws:accountId}:deliverystream/${opt:stage}-kinesis-firehose-datadog-DatadogDeliveryStream

    ServiceNx:
      Type: AWS::ECS::Service
      DependsOn:
        - ListenerAthNutHTTP2
        - ListenerAthNutSocket
        - TargetGroupAthNut2
        - TargetGroupAthNutForSocket
      Properties:
        LaunchType: FARGATE
        DesiredCount: 1
        ServiceName: !Ref ServiceNameNx
        Cluster: !Ref ClusterArn
        TaskDefinition: !Ref TaskDefinitionAthNut
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            Subnets:
              - !Ref Subnet2
              - !Ref Subnet1
            SecurityGroups:
              - !Ref SecurityGroup
        LoadBalancers:
          - ContainerName: !Ref ContainerName
            ContainerPort: !Ref AppContainerPort2
            TargetGroupArn: !Ref TargetGroupAthNut2
          - ContainerName: !Ref ContainerName
            ContainerPort: !Ref ClientPort
            TargetGroupArn: !Ref TargetGroupAthNutForSocket

    FargatePolicyNx:
      Type: AWS::IAM::Policy
      Condition: IsNorthVirg
      Properties:
        PolicyName: !Join ["", ["fargate-policy-", !Ref ComponentName]]
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ecr:CompleteLayerUpload"
                - "ecr:DescribeRepositories"
                - "ecr:ListImages"
                - "ecr:DescribeImages"
                - "ecr:GetAuthorizationToken"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:GetLifecyclePolicy"
                - "logs:CreateLogStream"
                - "logs:DescribeLogStreams"
                - "logs:PutRetentionPolicy"
                - "logs:CreateLogGroup"
                - "logs:PutLogEvents"
                - "cloudwatch:*"
              Resource: "*"
        Roles:
          - !Ref ExecutionTaskRoleAthNut

custom:
  environments:
    develop: dev
  us-east-1: novi
  us-east-2: ohio
  serviceName: athvio-nutrition
  clusterName: athvio-nutrition-cluster
  authorizer:
    develop: dev
  image:
    develop: integration
  securityGroup:
    develop:
      us-east-1: sg-024a78937c084982a
      us-east-2: sg-03299823a9eb49421
  VPCId:
    us-east-1:
      develop: vpc-036adcc6e31414ce0
    us-east-2:
      develop: vpc-00339ce5f4d4614b3
  Subnet:
    develop:
      us-east-1:
        subnet1: subnet-07c5f74464b09777d
        subnet2: subnet-0aba6ff500b2a5161
      us-east-2:
        subnet1: subnet-0a8f729b279c4bb88
        subnet2: subnet-0eaa1b28135c5f104


