# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ActivatePatientDto {
  password: String!
  user: String!
}

input AddCustomQuestionaryDetailsDto {
  professional: String!
  questionary: String!
  questionaryDetailsInput: [CreateCustomQuestionaryDetailInput!]!
  questionaryGroup: String!
}

input AddMealDto {
  meals: [MealBodyInput!]!
  plan: String!
  professional: String!
  program: String!
}

input AddPatientPlanCommentDto {
  commenter: CommenterInput!
  message: String!
  patientId: String!
  patientPlanId: String!
}

input AddPlanMealDto {
  meals: [MealBodyInput!]!
  patient: String!
  patientPlan: String!
  professional: String!
}

input AddProgramPlanDto {
  planBody: PlanBodyInput!
  professional: String!
  program: String!
}

input AdditionalInfoDto {
  birthday: DateTime
  country: String
  countryCode: String
  gender: String
  height: Float
  location: String
  phone: String
  photo: String
  profilePicture: String
  timezone: String
  weight: Float
}

input AnswersAndAdditionalNotesInput {
  additionalNotes: String!
  answer: String!
  questionaryDetail: String!
}

input AssignProgramDto {
  assignmentStartDate: DateTime!
  patients: [String!]!
  professional: String!
  program: String!
  startingDay: Float!
}

type Calory {
  _id: ID!
  calories: Float!
  carbs: Float!
  createdAt: DateTime!
  fat: Float!
  isDeleted: String!
  patient: ID!
  protein: Float!
  uuid: String!
}

type Chat {
  _id: ID!
  comments: [ChatComment!]!
  createdAt: DateTime!
  patient: String!
  professional: String!
  uuid: String!
}

type ChatComment {
  _id: ID!
  commenter: String!
  content: String!
  createdAt: DateTime!
  uuid: String!
}

input ChatCommentInput {
  commenter: String!
  content: String!
}

type Comment {
  commenter: Commenter!
  createdAt: DateTime!
  isDeleted: String!
  message: String!
  uuid: String!
}

type Commenter {
  commenterId: String!
  createdAt: DateTime!
  type: String!
  uuid: String!
}

input CommenterInput {
  commenterId: String!
  type: String!
}

input CreateCaloryDto {
  calories: Float!
  carbs: Float!
  fat: Float!
  patient: String!
  protein: Float!
}

input CreateCustomQuestionaryDetailInput {
  associatedQuestion: String!
  fieldName: String!
  isEnabled: Boolean!
}

input CreateNoteDto {
  content: String!
  date: String!
  patient: String!
  professional: String!
}

input CreateNutritionalMealDto {
  cookingInstructions: String
  image: Upload
  ingredientDetails: [IngredientDetailsInput!]!
  macros: MacrosInput!
  name: String!
  professional: String!
}

input CreatePatientGroupDto {
  groupName: String!
  professional: String!
}

input CreatePatientPlanDto {
  assignedDate: DateTime!
  meals: [MealBodyInput!]!
  patient: String!
  professional: String!
  title: String
}

input CreateProfesionalInfoDto {
  company: String
}

input CreateProgramDto {
  description: String
  name: String!
  professional: String!
}

input CreateProgramTagDto {
  professional: String!
  title: String!
}

input CreateUserInfoDto {
  email: String!
  firstname: String!
  lastname: String!
}

type CreateUserInfoResponse {
  email: String!
  firstname: String!
  lastname: String!
}

type CustomIngredient {
  amount: Float!
  ingredients: [Ingredient!]
  label: String!
  macros: Macros!
  name: String!
}

input CustomIngredientInput {
  amount: Float!
  ingredients: [IngredientInput!]
  label: String!
  macros: MacrosInput!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteCustomQuestionaryDetailsDto {
  professional: String!
  questionary: String!
  questionaryDetails: [String!]!
  questionaryGroup: String!
}

input DeleteMealDto {
  meals: [String!]!
  plan: String!
  professional: String!
  program: String!
}

input DeleteNoteDto {
  note: String!
  patient: String!
  professional: String!
}

input DeleteNutritionalMealDto {
  nutritionalMeal: String!
  professional: String!
}

input DeletePatientGroupDto {
  patientGroup: String!
  professional: String!
}

input DeletePatientPlanCommentDto {
  commentId: String!
  patientId: String!
  patientPlanId: String!
}

input DeletePatientPlanDto {
  patient: String!
  patientPlan: String!
  professional: String!
}

input DeletePlanMealDto {
  meals: [String!]!
  patient: String!
  patientPlan: String!
  professional: String!
}

input DeleteProgramDto {
  professional: String!
  program: String!
}

input DeleteProgramPlanDto {
  plan: String!
  professional: String!
  program: String!
}

input DeleteProgramTagDto {
  professional: String!
  programTag: String!
}

type Disease {
  id: ID!
  name: String!
}

type DiseaseCause {
  id: ID!
  name: String!
}

input DuplicatePatientPlanDto {
  assignedDate: DateTime!
  patient: String!
  patientPlan: String!
  professional: String!
}

input DuplicateProgramPlanDto {
  day: Float!
  plan: String!
  professional: String!
  program: String!
  week: Float!
}

input EnableQuestionaryDetail {
  isEnabled: Boolean!
  questionaryDetail: String!
}

input EnableQuestionaryDetailsDto {
  professional: String!
  questionary: String!
  questionaryDetails: [EnableQuestionaryDetail!]!
  questionaryGroup: String!
}

type Equivalent {
  customIngredient: CustomIngredient
  ingredient: Ingredient
  ingredientType: IngredientType!
}

input EquivalentsInput {
  customIngredient: CustomIngredientInput
  ingredient: IngredientInput
  ingredientType: String!
}

type Food {
  availableMeasures: [Measure!]!
  foodDatabase: String!
  foodId: String
  ingredientDetails: [IngredientDetail!]
  macros: Macros!
  name: String!
}

type FoodProviderSession {
  nextSession: String!
  title: String!
}

type FoodsMeta {
  foodProviderSessions: FoodProviderSession
  limit: Float!
  offset: Float!
  total: Float!
}

input GenerateNutritionalPlanDto {
  diseaseCauses: [String!]!
  diseases: [String!]!
  macros: PatientMacrosInput!
  mealsByDay: Float!
  nutritionalPreferences: [String!]!
  patient: String!
  startDate: DateTime!
  totalDays: Float!
}

input GetAutocompleteFoodNamesDto {
  foodDatabase: String!
  professional: String!
  search: String!
  targetLanguage: String!
}

type GetAutocompleteFoodNamesResponse {
  foodNames: [String!]!
}

input GetCaloryDto {
  patient: String!
}

input GetChatDto {
  patient: String!
  professional: String
}

input GetFoodsDto {
  foodDatabase: String!
  limit: Float = 30
  offset: Float = 0
  orderBy: String
  professional: String!
  search: [String!] = [""]
  session: String
  targetLanguage: String!
}

type GetFoodsResponse {
  data: [Food!]!
  meta: FoodsMeta!
}

input GetNotesDto {
  limit: Float = 30
  offset: Float = 0
  orderBy: String
  patient: String!
  professional: String!
  search: [String!] = [""]
}

type GetNotesResponse {
  data: [Note!]!
  meta: Meta!
}

input GetNutritionalMealDto {
  nutritionalMeal: String!
  professional: String!
}

input GetNutritionalMealsForPatientDto {
  category: String!
  limit: Float = 30
  offset: Float = 0
  orderBy: String
  patient: String!
  search: [String!] = [""]
}

input GetNutritionalMealsForProfessionalDto {
  database: String!
  language: String!
  limit: Float = 30
  offset: Float = 0
  orderBy: String
  professional: String!
  search: [String!] = [""]
}

type GetNutritionalMealsResponse {
  data: [NutritionalMeal!]!
  meta: Meta!
}

input GetPatientForMobileDto {
  patient: String!
}

type GetPatientForMobileResponse {
  _id: ID!
  birthday: DateTime
  createdAt: DateTime!
  gender: String
  groups: [PatientGroup!]!
  height: Float
  limitation: String
  location: String
  notes: String
  phone: String
  professional: String
  state: String
  target: String
  timezone: String
  user: User!
  uuid: String!
  weight: Float
}

input GetPatientForWebDto {
  patient: String!
  professional: String!
}

type GetPatientForWebResponse {
  _id: ID!
  birthday: DateTime
  createdAt: DateTime!
  gender: String
  groups: [PatientGroup!]!
  height: Float
  limitation: String
  location: String
  notes: String
  phone: String
  professional: String
  state: String
  target: String
  timezone: String
  user: User!
  uuid: String!
  weight: Float
}

input GetPatientGroupsDto {
  professional: String!
}

input GetPatientPlansForMobileDto {
  currentDate: DateTime!
  limit: Float = 30
  offset: Float = 0
  orderBy: String
  patient: String!
  patientPlanTypeDate: String!
  search: [String!] = [""]
}

input GetPatientPlansForWebDto {
  endDate: String!
  limit: Float = 30
  offset: Float = 0
  orderBy: String
  patient: String!
  search: [String!] = [""]
  startDate: String!
}

input GetPatientQuestionaryByIdDto {
  questionary: String!
}

input GetPatientQuestionaryDto {
  patient: String!
  professional: String!
}

input GetPatientUser {
  patient: String!
}

input GetPatientsDto {
  limit: Float = 30
  offset: Float = 0
  orderBy: String
  professional: String!
  search: [String!] = [""]
  state: String!
}

type GetPatientsResponse {
  data: [Patient!]!
  meta: Meta!
}

input GetProfessionalDto {
  professional: String!
}

input GetProfessionalQuestionaryDto {
  professional: String!
}

input GetProgramDto {
  professional: String!
  program: String!
}

input GetProgramTagsDto {
  professional: String!
}

input GetProgramsDto {
  limit: Float = 30
  offset: Float = 0
  orderBy: String
  professional: String!
  search: [String!] = [""]
}

type GetProgramsResponse {
  data: [Program!]!
  meta: Meta!
}

input GetUserDto {
  user: String!
}

type Ingredient {
  amount: String
  calories: Float!
  carbs: Float!
  fat: Float!
  label: String
  name: String!
  protein: Float!
  weightInGrams: Float!
}

type IngredientDetail {
  customIngredient: CustomIngredient
  equivalents: [Equivalent!]!
  ingredient: Ingredient
  ingredientType: IngredientType!
}

input IngredientDetailsInput {
  customIngredient: CustomIngredientInput
  equivalents: [EquivalentsInput!]!
  ingredient: IngredientInput
  ingredientType: String!
}

input IngredientInput {
  amount: String!
  calories: Float!
  carbs: Float!
  fat: Float!
  label: String!
  name: String!
  protein: Float!
  weightInGrams: Float!
}

enum IngredientType {
  """custom ingredient"""
  CUSTOM_INGREDIENT

  """unique ingredient"""
  UNIQUE_INGREDIENT
}

type JwtDto {
  role: String!
  token: String!
  uuid: String!
}

type Macros {
  calories: Float!
  carbs: Float!
  fat: Float!
  protein: Float!
  weightInGrams: Float!
}

input MacrosInput {
  calories: Float!
  carbs: Float!
  fat: Float!
  protein: Float!
  weightInGrams: Float!
}

input ManagePatientGroupDto {
  action: String!
  patient: String!
  patientGroup: String!
  professional: String!
}

input ManagePatientStateDto {
  patient: String!
  professional: String!
  state: String!
}

input ManageProgramTagDto {
  action: String!
  professional: String!
  program: String!
  programTag: String!
}

type Meal {
  cookingInstructions: String!
  createdAt: DateTime!
  image: String
  ingredientDetails: [IngredientDetail!]!
  macros: Macros!
  mealTag: String!
  name: String
  position: Float
  uuid: String!
}

input MealBodyInput {
  cookingInstructions: String!
  image: String
  ingredientDetails: [IngredientDetailsInput!]!
  macros: MacrosInput!
  meal: String
  mealTag: String!
  name: String!
  position: Float
}

type Measure {
  label: String!
  uri: String
  weightInGrams: Float!
}

type Meta {
  limit: Float!
  offset: Float!
  total: Float!
}

type Mutation {
  activatePatient(input: ActivatePatientDto!): User!
  addCustomQuestionaryDetails(toAddInput: AddCustomQuestionaryDetailsDto!): ProfessionalQuestionary!
  addPatientPlanComment(input: AddPatientPlanCommentDto!): PatientPlan!
  addPlanMeal(toAddInput: AddPlanMealDto!): PatientPlan!
  addProgramPlan(input: AddProgramPlanDto!): Program!
  assignProgram(input: AssignProgramDto!): [PatientPlan!]!
  createCalory(input: CreateCaloryDto!): Calory!
  createMeal(toAddInput: AddMealDto!): Program!
  createNote(input: CreateNoteDto!): Note!
  createNutritionalMeal(input: CreateNutritionalMealDto!): NutritionalMeal!
  createPatientGroup(input: CreatePatientGroupDto!): PatientGroup!
  createPatientPlan(input: CreatePatientPlanDto!): PatientPlan!
  createProgram(input: CreateProgramDto!): Program!
  createProgramTag(input: CreateProgramTagDto!): ProgramTag!
  deleteCustomQuestionaryDetails(toDeleteInput: DeleteCustomQuestionaryDetailsDto!): ProfessionalQuestionary!
  deleteMeal(toDeleteInput: DeleteMealDto!): Program!
  deleteNote(input: DeleteNoteDto!): Note!
  deleteNutritionalMeal(input: DeleteNutritionalMealDto!): NutritionalMeal!
  deletePatientGroup(input: DeletePatientGroupDto!): PatientGroup!
  deletePatientPlan(input: DeletePatientPlanDto!): PatientPlan!
  deletePatientPlanComment(input: DeletePatientPlanCommentDto!): PatientPlan!
  deletePlanMeal(toDeleteInput: DeletePlanMealDto!): PatientPlan!
  deleteProgram(input: DeleteProgramDto!): Program!
  deleteProgramPlan(input: DeleteProgramPlanDto!): Program!
  deleteProgramTag(input: DeleteProgramTagDto!): ProgramTag!
  duplicatePatientPlan(input: DuplicatePatientPlanDto!): PatientPlan!
  duplicateProgramPlan(input: DuplicateProgramPlanDto!): Program!
  enableQuestionaryDetails(input: EnableQuestionaryDetailsDto!): ProfessionalQuestionary!
  generateNutritionalPlanForPatient(input: GenerateNutritionalPlanDto!): [PatientPlan!]!
  managePatientGroup(input: ManagePatientGroupDto!): Patient!
  managePatientState(input: ManagePatientStateDto!): Patient!
  manageProgramTag(input: ManageProgramTagDto!): Program!
  saveChatComment(input: SaveChatCommentDto!): Chat!
  sendPatientQuestionary(input: SendPatientQuestionaryDto!): Boolean!
  signIn(input: SignInDto!): JwtDto!
  signUpPatient(input: SignUpPatientDto!): SignUpPatientResponse!
  signUpPatientFromMobile(input: SignUpPatientFromMobileDto!): JwtDto!
  signUpProfessional(input: SignUpProfessionalDto!): JwtDto!
  updateAnswersAndAdditionalNotes(input: UpdateAnswersAndAdditionalNotesDto!): PatientQuestionary!
  updateCalory(input: UpdateCaloryDto!): Calory!
  updateCustomQuestionaryDetails(toUpdateInput: UpdateCustomQuestionaryDetailsDto!): ProfessionalQuestionary!
  updateMeal(toUpdateInput: UpdateMealDto!): Program!
  updateNote(input: UpdateNoteDto!): Note!
  updateNutritionalMeal(input: UpdateNutritionalMealDto!): NutritionalMeal!
  updatePatientGroup(input: UpdatePatientGroupDto!): PatientGroup!
  updatePatientPlan(input: UpdatePatientPlanDto!): PatientPlan!
  updatePatientPlanComment(input: UpdatePatientPlanCommentDto!): PatientPlan!
  updatePatientQuestionaryAnswers(input: UpdateAnswersDto!): PatientQuestionary!
  updatePlanAssignedWeekDay(input: UpdatePlanAssignedWeekDayDto!): Program!
  updatePlanMeal(toUpdateInput: UpdatePlanMealDto!): PatientPlan!
  updateProgram(input: UpdateProgramDto!): Program!
  updateProgramTag(input: UpdateProgramTagDto!): ProgramTag!
  updateUser(input: UpdateUserDto!): User!
  uploadImage(input: UploadDto!): NutritionalMeal!
}

type Note {
  _id: ID!
  content: String
  createdAt: DateTime!
  date: DateTime!
  isDeleted: Boolean!
  patient: String!
  professional: String!
  uuid: String!
}

type NutritionalMeal {
  _id: ID!
  cookingInstructions: String!
  createdAt: DateTime!
  description: String
  healthBenefits: String
  image: String
  ingredientDetails: [IngredientDetail!]!
  ingredients: [IngredientDetail!]!
  macros: Macros!
  name: String!
  professional: String!
  servings: String!
  source: String!
  uuid: String!
  yield: String!
}

type NutritionalPreference {
  createdAt: DateTime!
  id: ID!
  name: String!
  uuid: String!
}

type Organization {
  address: String!
  city: String!
  company: String!
  postalCode: String!
  province: String!
}

type Patient {
  _id: ID!
  birthday: DateTime
  createdAt: DateTime!
  gender: String
  groups: [PatientGroup!]!
  height: Float
  limitation: String
  location: String
  notes: String
  phone: String
  professional: String
  state: String
  target: String
  timezone: String
  user: User!
  uuid: String!
  weight: Float
}

type PatientGroup {
  createdAt: DateTime!
  groupName: String!
  isDeleted: String!
  professional: String!
  uuid: String!
}

input PatientMacrosInput {
  calories: Float!
  carbs: Float!
  fat: Float!
  protein: Float!
}

type PatientPlan {
  assignedDate: DateTime!
  commentResult: String!
  comments: [Comment!]!
  createdAt: DateTime!
  isDeleted: Boolean!
  meals: [Meal!]
  patient: String!
  state: String!
  title: String
  uuid: String!
}

type PatientQuestionary {
  _id: ID!
  createdAt: DateTime!
  patient: String!
  professional: String!
  questionaryGroups: [PatientQuestionaryGroup!]!
  uuid: String!
}

input PatientQuestionaryAnswersInput {
  answer: String!
  questionaryDetail: String!
}

type PatientQuestionaryDetail {
  _id: ID!
  additionalNotes: String!
  answer: String!
  associatedQuestion: String!
  fieldName: String!
  isDeleted: Boolean!
  isEnabled: Boolean!
  options: [String!]!
}

type PatientQuestionaryGroup {
  _id: ID!
  description: String
  questionaryDetails: [PatientQuestionaryDetail!]!
  title: String!
}

input PatientQuestionaryGroupInput {
  questionaryDetails: [AnswersAndAdditionalNotesInput!]!
  questionaryGroup: String!
}

input PatientQuestionaryGroupWithAnswersInput {
  questionaryDetails: [PatientQuestionaryAnswersInput!]!
  questionaryGroup: String!
}

type Plan {
  createdAt: DateTime!
  day: Float!
  isDeleted: Boolean!
  meals: [Meal!]!
  title: String!
  uuid: String!
  week: Float!
}

input PlanBodyInput {
  day: Float!
  meals: [MealBodyInput!]!
  title: String!
  week: Float!
}

type Professional {
  company: String!
  createdAt: DateTime!
  organization: Organization!
  timezone: String!
  unitPreference: String!
  user: User!
  uuid: String!
}

type ProfessionalQuestionary {
  _id: ID!
  createdAt: DateTime!
  professional: ID!
  questionaryGroups: [ProfessionalQuestionaryGroup!]!
  uuid: String!
}

type ProfessionalQuestionaryDetail {
  _id: ID!
  associatedQuestion: String!
  fieldName: String!
  isDeleted: Boolean!
  isEnabled: Boolean!
  options: [String!]!
}

type ProfessionalQuestionaryGroup {
  _id: ID!
  description: String
  questionaryDetails: [ProfessionalQuestionaryDetail!]!
  title: String!
}

type Program {
  createdAt: DateTime!
  description: String!
  isSyncActive: Boolean!
  name: String!
  patients: [Patient!]!
  plans: [Plan!]!
  professional: String!
  programTags: [ProgramTag!]!
  uuid: String!
}

type ProgramTag {
  createdAt: DateTime!
  isDeleted: String!
  professional: String!
  title: String!
  uuid: String!
}

type Query {
  getAllDiseaseCauses: [DiseaseCause!]!
  getAllDiseases: [Disease!]!
  getAllNutritionalPreferences: [NutritionalPreference!]!
  getAutoCompleteFoodNames(input: GetAutocompleteFoodNamesDto!): GetAutocompleteFoodNamesResponse!
  getCalory(input: GetCaloryDto!): Calory!
  getChat(chat: GetChatDto!): Chat
  getFoodDatabases: [String!]!
  getFoods(input: GetFoodsDto!): GetFoodsResponse!
  getNotes(input: GetNotesDto!): GetNotesResponse!
  getNutritionalMeal(input: GetNutritionalMealDto!): NutritionalMeal!
  getNutritionalMealDatabases: [String!]!
  getNutritionalMealsForPatient(input: GetNutritionalMealsForPatientDto!): GetNutritionalMealsResponse!
  getNutritionalMealsForProfessional(input: GetNutritionalMealsForProfessionalDto!): GetNutritionalMealsResponse!
  getPatientForMobile(input: GetPatientForMobileDto!): GetPatientForMobileResponse!
  getPatientForWeb(patient: GetPatientForWebDto!): GetPatientForWebResponse!
  getPatientGroups(input: GetPatientGroupsDto!): [PatientGroup!]!
  getPatientPlansForMobile(patientPlans: GetPatientPlansForMobileDto!): [PatientPlan!]!
  getPatientPlansForWeb(patientPlans: GetPatientPlansForWebDto!): [PatientPlan!]!
  getPatientQuestionary(input: GetPatientQuestionaryDto!): PatientQuestionary!
  getPatientQuestionaryById(input: GetPatientQuestionaryByIdDto!): PatientQuestionary!
  getPatientUserForMobile(input: GetPatientUser!): User!
  getPatients(input: GetPatientsDto!): GetPatientsResponse!
  getProfessional(professional: GetProfessionalDto!): Professional!
  getProfessionalQuestionary(input: GetProfessionalQuestionaryDto!): ProfessionalQuestionary!
  getProgram(input: GetProgramDto!): Program!
  getProgramTags(input: GetProgramTagsDto!): [ProgramTag!]!
  getPrograms(input: GetProgramsDto!): GetProgramsResponse!
  getUser(input: GetUserDto!): User!
  populateSpanishFoods: [String!]!
}

type QuestionaryDetailBase {
  _id: ID!
  associatedQuestion: String!
  fieldName: String!
  isDeleted: Boolean!
  isEnabled: Boolean!
  options: [String!]!
}

type QuestionaryGroupBase {
  _id: ID!
  description: String
  questionaryDetails: [QuestionaryDetailBase!]!
  title: String!
}

input SaveChatCommentDto {
  comment: ChatCommentInput!
  patient: String!
  professional: String
}

input SendPatientQuestionaryDto {
  patient: String!
  professional: String!
  questionary: String!
}

input SignInDto {
  email: String!
  password: String!
}

input SignUpPatientDto {
  additionalInfo: AdditionalInfoDto
  professional: String!
  userInfo: CreateUserInfoDto!
}

input SignUpPatientFromMobileDto {
  email: String!
  password: String!
}

type SignUpPatientResponse {
  _id: ID!
  birthday: DateTime
  gender: String
  groups: [PatientGroup!]!
  height: Float
  location: String
  phone: String
  professional: ID!
  timezone: String
  userInfo: CreateUserInfoResponse!
  weight: Float
}

input SignUpProfessionalDto {
  acceptedTerms: Boolean
  clientOffsetMinutes: Float!
  country: String
  countryCode: String
  detectedLanguage: String!
  email: String!
  firstname: String!
  lastname: String!
  password: String!
  phone: String
  professionalInfo: CreateProfesionalInfoDto
}

input SubscribePublishedMessageDto {
  patient: String!
  professional: String
}

type Subscription {
  patientMessaged(input: SubscribePublishedMessageDto!): Chat
  professionalMessaged(input: SubscribePublishedMessageDto!): Chat
}

input UpdateAnswersAndAdditionalNotesDto {
  patient: String!
  professional: String!
  questionary: String!
  questionaryGroups: [PatientQuestionaryGroupInput!]!
}

input UpdateAnswersDto {
  patient: String!
  professional: String!
  questionary: String!
  questionaryGroups: [PatientQuestionaryGroupWithAnswersInput!]!
}

input UpdateCaloryDto {
  calories: Float!
  calory: String!
  carbs: Float!
  fat: Float!
  patient: String!
  protein: Float!
}

input UpdateCustomQuestionaryDetailInput {
  associatedQuestion: String!
  fieldName: String!
  isEnabled: Boolean!
  questionaryDetail: String!
}

input UpdateCustomQuestionaryDetailsDto {
  professional: String!
  questionary: String!
  questionaryDetailsInput: [UpdateCustomQuestionaryDetailInput!]!
  questionaryGroup: String!
}

input UpdateMealDto {
  meals: [MealBodyInput!]!
  plan: String!
  professional: String!
  program: String!
}

input UpdateNoteDto {
  content: String!
  note: String!
  patient: String!
  professional: String!
}

input UpdateNutritionalMealDto {
  cookingInstructions: String!
  image: Upload
  ingredientDetails: [IngredientDetailsInput!]!
  macros: MacrosInput!
  name: String!
  nutritionalMeal: String!
  professional: String!
}

input UpdatePatientGroupDto {
  groupName: String!
  patientGroup: String!
  professional: String!
}

input UpdatePatientPlanCommentDto {
  commentId: String!
  message: String!
  patientId: String!
  patientPlanId: String!
}

input UpdatePatientPlanDto {
  assignedDate: DateTime!
  patient: String!
  patientPlan: String!
  professional: String!
  title: String
}

input UpdatePlanAssignedWeekDayDto {
  day: Float!
  plan: String!
  professional: String!
  program: String!
  week: Float!
}

input UpdatePlanMealDto {
  meals: [MealBodyInput!]!
  patient: String!
  patientPlan: String!
  professional: String!
}

input UpdateProgramDto {
  description: String!
  name: String!
  professional: String!
  program: String!
}

input UpdateProgramTagDto {
  professional: String!
  programTag: String!
  title: String!
}

input UpdateUserDto {
  email: String!
  firstname: String!
  lastname: String!
  user: String!
}

"""Upload files"""
scalar Upload

input UploadDto {
  image: Upload!
  nutritionalMeal: String!
}

type User {
  country: String!
  countryCode: String!
  createdAt: DateTime!
  email: String!
  firstname: String
  isDarkMode: Boolean!
  lastname: String
  phone: String!
  photo: String
  role: String!
  uuid: String!
}